Début: 14:00

Je cherche à trier en ordre croissant la liste d'entiers suivante : [54, 25, 107, 12, 15, 34, 25, 68]

1. Quel est la liste triée dans l'ordre croissant ? Je vous demande juste la réponse, pas un programme.
  [12, 15, 25, 25, 34, 54, 68, 107]

2. Comment pourriez-vous trier cette liste en python ? Donner un lien vers la référence officielle d'une fonction python permettant de trier une liste, et fournir un exemple de code python utilisant cette fonction.
  a = [54, 25, 107, 12, 15, 34, 25, 68]
  a.sort() #source https://docs.python.org/3/howto/sorting.html
  print(a)

3. Rechercher des informations sur le "tri bulle". Décrivez-moi avec vos mots comment fonctionne le tri bulle. Donnez-moi les sources qui vous ont permis de comprendre ce qu'est le tri bulle (exemples : vidéos youtube, blogposts, tutoriel, cours, encyclopédie en ligne, etc).
  Le Tri à bulle est un système de tri qui réalise plusieurs passages dans la liste donnée tout en comparant les éléments elem[0] et elem[1] pour déterminer si elem[0] est plus petit ou plus grand que elem[1].
  Si elem[0] est plus grand qu'elem[1] alors ces deux éléments sont échangés. Ainsi elem[0] prend la valeur d'elem[1] et elem[1] prend la valeur d'elem[0]. Une fois cette action effectuée, le programme va comparer les éléments suivants de la même façon que précédemment.
  #sources: https://waytolearnx.com/2019/04/tri-a-bulle-en-python.html / https://www.stechies.com/bubble-sort-python/ / https://www.youtube.com/watch?v=Cq7SMsQBEUw

4. Expliquer la suite des étapes utilisées pour trier la liste d'entiers [54, 25, 107, 12, 15, 34, 25, 68] avec un tri bulle. Je vous donne le début :
  voir bubble_sorting.py

5. Coder un programme qui réalise un tri bulle sur une liste. Vous pouvez vous inspirer d'un code trouvé sur internet mais dans ce cas je vous incite à bien le comprendre.
  voir bubble_sorting.py

6. Modifier votre programme pour afficher à l'écran le résultat de la question 4.
  voir bubble_sorting.py

7. Coder un programme qui génère une liste d'entiers aléatoires de taille donnée.
  voir rand_bubble_sorting.py

9. Quelle taille doit faire une liste pour que l'exécution du tri bulle dure approximativement 1 seconde ?
  Il faut une liste de taille 3425. Voir rand_bubble_sorting.py avec comme 3425 comme input

10. Pour cette même taille, combien de temps prends la fonction que vous avez utilisée à la question 2 ?
  Autant de temps que ma fonction utilisée. Voir rand_bubble_sorting.py

11. A la lumière de vos réponses aux questions 9 et 10, peut-on dire que le tri bulle est rapide ?
  Le tri à bulle est convenable pour de petites tailles de listes. Cependant il reste l'un des algorithmes de tri les plus lent.

12. Quel est le nom de l'algorithme de tri utilisé par la fonction de la question 2 ?
  Timsort https://en.wikipedia.org/wiki/Timsort

13. Expliquer avec vos mots ce qu'est la "complexité en temps" d'un algorithme ? N'oubliez pas de m'indiquer les sources que vous avez consultées. Quelle est la complexité en temps du tri bulle ? Et celle de la fonction de la question 2 ?
  La complexité de temps c'est le nombre d'étapes de calcul comptées dans un algorithme. https://fr.wikipedia.org/wiki/Complexit%C3%A9_en_temps
  Tri à bulle : Pour le tri non optimisé, la complexité en temps est de Θ(n2), avec n la taille du tableau. https://fr.wikipedia.org/wiki/Tri_%C3%A0_bulles
  Timsort: a une complexité en temps dans le pire des cas en {\displaystyle O(N\ln(N))}O(N\ln(N)). Dans le meilleur cas, qui survient par exemple si la liste est déjà triée, la complexité est linéaire. https://fr.wikipedia.org/wiki/Timsort

14. Il existe une autre notion de "complexité" pour une algorithme : la "complexité en espace" aussi appelée "complexité en mémoire". Quelles sont les complexités en espace des 2 algorithmes étudiés ?
  Tri à bulle: En moyenne, la complexité est aussi Θ(n2). En effet, le nombre d'échanges de paires d'éléments successifs est égal au nombre d'inversions de la permutation, c'est-à-dire de couples (i,j) tels que i < j et T(i) > T(j). Ce nombre est indépendant de la manière d'organiser les échanges. Lorsque l'ordre initial des éléments du tableau est aléatoire, il est en moyenne égal à n(n-1)/4 3. https://fr.wikipedia.org/wiki/Tri_%C3%A0_bulles
  Timsort: La complexité en espace dans le pire des cas est également linéaire en la taille de l'entrée. https://fr.wikipedia.org/wiki/Timsort

15. Coder l'algorithme de tri qui est utilisé par la fonction de la question 2.
  Code prit sur: https://guide.freecodecamp.org/algorithms/sorting-algorithms/timsort/

Fin: 17:40 (probabilité de modifications si j'ai du temps entre mes autres cours et les dossiers demandés par mon cursus universitaire, que je doit rendre en priorité.)
